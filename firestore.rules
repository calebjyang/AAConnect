rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Config collection - public read, admin write
    match /config/{document} {
      allow read: if true;
      allow write: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.token.email));
    }
    
    // Events collection - public read, admin write
    match /events/{eventId} {
      allow read: if true;
      allow write: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.token.email));
    }
    
    // Rides collection - public read/write for signups, admin for management
    match /rides/{rideId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.token.email));
    }
    
    // Carpool assignments collection - admin only
    match /carpoolAssignments/{assignmentId} {
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.token.email));
    }
    
    // Admins collection - admin only
    match /admins/{email} {
      allow read, write: if request.auth != null && 
        request.auth.token.email == email;
    }

    // Apartments collection - public read, admin write
    match /apartments/{apartmentId} {
      allow read: if true;
      allow write: if request.auth != null &&
        exists(/databases/$(database)/documents/admins/$(request.auth.token.email));
    }

    // Apartment members collection - public read for UI display, admin write
    match /apartmentMembers/{memberId} {
      allow read: if true;
      allow write: if request.auth != null &&
        exists(/databases/$(database)/documents/admins/$(request.auth.token.email));
    }

    // Availability slots collection - authenticated users only, RSVP support, admin write
    match /availabilitySlots/{slotId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && (
        // Allow the slot owner or admin to update any field
        resource.data.postedBy == request.auth.uid ||
        exists(/databases/$(database)/documents/admins/$(request.auth.token.email)) ||
        // Allow any authenticated user to add themselves to joinedUsers (RSVP)
        (
          request.resource.data.joinedUsers is list &&
          request.resource.data.joinedUsers.size() >= resource.data.joinedUsers.size()
        )
      );
    }

    // Users collection - public read, admin write (needed for notification system)
    match /users/{userId} {
      allow read: if true;
      allow write: if request.auth != null &&
        exists(/databases/$(database)/documents/admins/$(request.auth.token.email));
    }

    // Notifications collection - recipients can read/update their own, admins can read all
    match /notifications/{notificationId} {
      allow read, update, delete: if request.auth != null && (
        resource.data.recipientId == request.auth.uid ||
        exists(/databases/$(database)/documents/admins/$(request.auth.token.email))
      );
      allow create: if request.auth != null;
    }
  }
}